<template>
  <div class="container">
    <div class="header">
      <div class="iconfont iconnew"></div>
      <!-- <router-link to="/search2"> -->
      <div class="search" @click="$router.push('/search')">
        <span class="iconfont iconsearch"></span>
        搜索新闻
      </div>
      <!-- </router-link> -->
      <router-link to="/personal">
        <div class="iconfont iconwode"></div>
      </router-link>
    </div>
    <!-- tab栏切换 -->
    <!-- v-model：就是当前的索引值，是唯一的，比较类似于for循环的key -->
    <!-- sticky：是否使用粘性定位布局 -->
    <!-- swipeable: 是否开启手势滑动切换 -->
    <!-- scroll 检测页面滑动的值 -->
    <van-tabs v-model="active" sticky swipeable @scroll="handelScroll">
      <van-tab
        v-for="(item, index) in categories"
        v-if="item.is_top===1|| item.name===`V`"
        :key="index"
        :title="item.name"
      >
        <van-list
          :immediate-check="false"
          v-model="categories[active].loading"
          :finished="categories[active].finished"
          finished-text="已经到底部啦"
          @load="onLoad"
        >
          <div v-for="(v,index) in item.list" :key="index">
            <Postltem1 :data="v" v-if=" v.type===1 && v.cover.length <3" />
            <Postltem2 :data="v" v-if=" v.type===1 && v.cover.length >=3" />
            <Postltem3 :data="v" v-if=" v.type===2 " />
          </div>
        </van-list>
      </van-tab>
    </van-tabs>
  </div>
</template>
<script>
// 标签页
import { Tab, Tabs } from "vant";
// 下拉加载
import { List } from "vant";
import Postltem1 from "@/components/Postltem1";
import Postltem2 from "@/components/Postltem2";
import Postltem3 from "@/components/Postltem3";

export default {
  components: {
    Postltem1,
    Postltem2,
    Postltem3
  },
  data() {
    return {
      active: 0,
      // 本地栏目的数据
      list: [],
      categories: [],
      token: ""
    };
  },
  // 监听
  watch: {
    active(index) {
      // 根据索引值来判断点击的是哪个标签
      console.log(index);
      // ]如果该点击的索引等于这个数组的长度就跳转到栏目管理页面
      // 因为栏目只显示is_top=1的栏目,所以要过滤出来
      const arr = this.categories.filter(v => {
        return v.is_top === 1 || v.name === "V";
      });
      if (index === arr.length - 1) {
        // console.log(1);
        this.$router.push("/Column");
      }
      // 切换不同栏目的时候,重新请求列表数据
      this.getList();
      setTimeout(() => {
        // 页面滚动到当前栏目下的scrollY值
        window.scrollTo(0, this.categories[this.active].scrollY);
      }, 10);
    }
  },
  mounted() {
    // 获取本地栏目数据;
    const categories = JSON.parse(localStorage.getItem("categories"));
    // 获取本地token值,看看用户是否登录,判断栏目上是否有关注栏目
    const { token } = JSON.parse(localStorage.getItem("userInfo")) || {};
    this.token = token;
    // 如果有栏目数据
    if (categories) {
      // 判断是否有关注的栏目
      if (
        (token && categories[0].name !== "关注") ||
        (!token && categories[0].name === "关注")
      ) {
        // 然后符合条件就要重新请求获取数据
        this.getColumn();
      } else {
        this.categories = categories;
        //  给每个栏目添加属性
        this.getcategories();
      }
      // this.getColumn();
    } else {
      // 如果没有数据重新请求获取数据
      this.getColumn();
    }
  },
  methods: {
    onLoad() {
      // this.categories[this.active].pageIndex += 1;

      this.getList();
    },

    // 给每个栏目数据都是独立的,分别添加属性
    getcategories() {
      this.categories = this.categories.map(i => {
        i.pageIndex = 1; // 给每个栏目都添加了一个pageIndex属性
        i.list = []; // 给每个栏目都拥有自己的文章列表
        i.finished = false; // 给每个栏目都添加一个文章是否全部加载完毕的状态
        i.loading = false; // 给每个栏目都添加是否正在请求的状态
        i.scrollY = 0; // 给每个栏目添加一个滚动条的高度
        i.isLoad = false; //判断栏目是否正在执行
        return i;
      });
      // 不知道栏目有没有数据,所以请求文章列表数据,是一定要放到栏目处理之后执行,
      this.getList();
    },

    // 请求获取栏目信息
    getColumn() {
      const config = {
        url: "/category"
      };
      // 如果有token是设置请求头信息
      if (this.token) {
        config.headers = {
          Authorization: this.token
        };
      }
      this.$axios(config).then(res => {
        console.log(res);
        // 解构出数据
        const { data } = res.data;
        // 需要追加一个栏目管理
        data.push({
          name: "V"
        });
        this.categories = data;
        localStorage.setItem("categories", JSON.stringify(data));
        this.getcategories();
      });
    },
    getList() {
      const { id, pageIndex, finished, name, isLoad } = this.categories[
        this.active
      ];

      // 如果数据加载完就不再执行后面的代码
      if (finished) return;
      //  如果正在请求,就不再执行后面代码
      if (isLoad) return;
      // 开始加载
      this.categories[this.active].isLoad = true;

      // 加载页面时,让各自栏目的pageIndex+1
      this.categories[this.active].pageIndex += 1;
      const config = {
        url: "/post",
        params: {
          pageIndex,
          pageSize: 4,
          category: id
        }
      };
      if (name === "关注") {
        config.headers = {
          Authorization: this.token
        };
      }
      this.$axios(config).then(res => {
        // console.log(res);
        const { data, total } = res.data;
        // 加载的内容追加到当前数组里面
        this.categories[this.active].list = [
          ...this.categories[this.active].list,
          ...data
        ];
        // 因为改变属性,不可驱动视图变化
        this.categories = [...this.categories];
        //  loading事件加载完毕
        this.categories[this.active].loading = false;
        //  数据加载完毕判断
        if (this.categories[this.active].list.length === total) {
          this.categories[this.active].finished = true;
        }
        // 加载完毕就变成false
        this.categories[this.active].isLoad = false;
        console.log(this.categories[this.active].list);
      });
    },
    handelScroll(data) {
      // 等页面数据加载完才可以执行代码,否则跳出
      if (this.categories.length === 0) return;
      const { scrollTop } = data;
      console.log(scrollTop);
      this.categories[this.active].scrollY = scrollTop;

      // 把浏览器回到滑动到的距离
    }
  }
};
</script>
<style lang="less" scoped>
// 如果添加了scoped之后,想修改第三方的样式要在样式前面/deep/
.container {
  // height: 1800px;
  .header {
    padding: 15/360 * 100vw;
    height: 45/360 * 100vw;
    background-color: #ff0000;
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: white;
    .iconnew {
      transform: scale(2);
      font-size: 25/360 * 100vw;
      padding-left: 5/360 * 100vw;
    }
    .search {
      display: flex;
      align-items: center;
      justify-content: center;
      flex: 1;
      height: 30/360 * 100vw;
      background-color: rgba(250, 250, 250, 0.5);
      border-radius: 50/360 * 100vw;
      margin: 0 20/360 * 100vw;
      span {
        margin-right: 5/360 * 100vw;
        font-size: 18/360 * 100vw;
      }
    }
    .iconwode {
      font-size: 25/360 * 100vw;
    }
  }
  /deep/ .van-tabs__nav {
    background-color: #eee !important;
  }
  /deep/ .van-tab.van-ellipsis {
    flex-basis: 15% !important;
  }
  /deep/ .van-tab:nth-last-child(2) {
    position: absolute;
    top: 0px;
    right: 0px;
    font-size: 35/360 * 100vw !important;
    box-sizing: unset;
    background-color: #eee;
  }

  /deep/ .van-tabs__wrap {
    padding-right: 25/360 * 100vw;
  }

  /deep/ .van-tabs__nav {
    // 静态定位
    // 恢复到原始流,不受定位影响!
    position: static;
  }
  /deep/ .van-tabs__line {
    position: static;
    // display: none;
  }
  /deep/.van-tab--active {
    border-bottom: 1px solid red;
  }
}
</style>