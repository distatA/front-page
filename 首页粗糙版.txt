<template>
  <div class="container">
    <div class="header">
      <div class="iconfont iconnew"></div>
      <!-- <router-link to="/search2"> -->
      <div class="search" @click="$router.push('/search2')">
        <span class="iconfont iconsearch"></span>
        搜索新闻
      </div>
      <!-- </router-link> -->
      <router-link to="/personal">
        <div class="iconfont iconwode"></div>
      </router-link>
    </div>
    <!-- tab栏切换 -->
    <!-- v-model：就是当前的索引值，是唯一的，比较类似于for循环的key -->
    <!-- sticky：是否使用粘性定位布局 -->
    <!-- swipeable: 是否开启手势滑动切换 -->
    <van-tabs v-model="active" sticky swipeable>
      <van-tab v-for="(item, index) in categories" :key="index" :title="item.name">
        <!-- 下拉刷新 -->
        <!-- <van-pull-refresh v-model="refreshing" @refresh="onRefresh"> -->
        <!-- immediate-check	是否在初始化时立即执行滚动位置检查,这个属性可以阻止list组件默认就加载一次,不用一次全部数据请求完 -->
        <van-list
          :immediate-check="false"
          v-model="categories[active].loading"
          :finished="categories[active].finished"
          finished-text="已经到底部啦"
          @load="onLoad"
        >
          <div v-for="(item, index) in categories[active].posts " :key="index">
            <!-- 只有单张图片的 -->
            <Postltem1
              v-if="item.type === 1 && item.cover.length > 0 && item.cover.length < 3"
              :data="item"
            />
            <Postltem2 v-if="item.type === 1 && item.cover.length >=3" :data="item" />
            <Postltem3 v-if="item.type===2 " :data="item" />
          </div>
        </van-list>
        <!-- </van-pull-refresh> -->
      </van-tab>
    </van-tabs>
  </div>
</template>
<script>
// 标签页
import { Tab, Tabs } from "vant";
// 下拉加载
import { List } from "vant";
import Postltem1 from "@/components/Postltem1";
import Postltem2 from "@/components/Postltem2";
import Postltem3 from "@/components/Postltem3";

export default {
  components: {
    Postltem1,
    Postltem2,
    Postltem3
  },
  data() {
    return {
      active: 0,
      // list: [],
      // loading: false, //是否正在加载中 默认是false
      // finished: false, //是否已经全部内容加载完毕 默认false
      // userInfo: [],
      // 本地栏目的数据
      categories: []
      // 记录当前的id
      // categoryId: 999
    };
  },
  // 监听
  watch: {
    active(index) {
      // 根据索引值来判断点击的是哪个标签
      console.log(index);
      // ]如果该点击的索引等于这个数组的长度就跳转到栏目管理页面
      if (index === this.categories.length - 1) {
        // console.log(1);
        this.$router.push("/Column");
      }
      // 请求不同的栏目的数据
      this.getList();
    }
  },
  mounted() {
    // 获取本地栏目数据
    const categories = JSON.parse(localStorage.getItem("categories"));
    // 获取本地的token值
    const { token } = JSON.parse(localStorage.getItem("userInfo")) || {};
    // 判断是否登录状态
    // 如果有本地栏目数据
    if (categories) {
      // 就把数据赋值到categorys数组的数据中
      // console.log(categories);
      // 如果本地数据有数据,并且有token值,第一个栏目名不叫关注
      if (
        (categories[0].name !== "关注" && token) ||
        (categories[0].name === "关注" && !token)
      ) {
        // 重新请求数据
        this.getColumn(token);
        // 停止执行后面代码
        return;
        // 如果本地数据有数据,没有token值,但第一个栏目名叫关注
      }
      this.categories = categories;
      // 调用方法:给每个栏目都加了个pageindex=1
      this.getCategories();
      // console.log(this.categories);
    } else {
      // 如果有登录,传入token值,验证请求头信息
      this.getColumn(token);
    }

    // // 请求文章
    // this.$axios({
    //   url: "/post",
    //   // 问号后面的参数
    //   params: {
    //     // 头条的id
    //     category: this.categories[this.active].id,
    //     // 页面索引
    //     pageIndex: 1,
    //     // 默认页面数量
    //     pagesize: 5
    //   }
    // }).then(res => {
    //   // console.log(res);
    //   // 解构出列表文章数据
    //   const { data } = res.data;
    //   // 赋值给list进行渲染
    //   // 如果是修改数组中某一项的属性，不会驱动视图的更新的
    //   this.categories[this.active].posts = data;
    //   // 这种赋值的方式可以引起模板的刷新
    //   this.categories = [...this.categories];
    // });
    this.getList();
  },
  methods: {
    // 给每个栏目添加属性
    getCategories() {
      this.categories = this.categories.map(item => {
        item.pageIndex = 1;
        // 因为栏目的数据都不同,不能全部栏目数据加到同一个list当中,所以重新给每一个栏目加一个数组,获取到该栏目数据的时候就追加到当前栏目的数组里面
        item.loading = false;
        item.finished = false;
        item.posts = [];
        return item;
      });
    },
    // 请求栏目数据
    getColumn(token) {
      // 把路径赋值给一个变量
      const config = {
        url: "/category"
      };
      // 如果有token值就设请求头信息
      if (token) {
        config.headers = { Authorization: token };
      }
      // 传入axios请求中
      // 没有本地的数据才去请求栏目接口
      this.$axios(config).then(res => {
        // console.log(res);
        const { data } = res.data;
        // 给data添加一个点击跳转到栏目管理的图标
        data.push({
          name: "V"
        });
        // 把数据保存到数组中
        this.categories = data;
        // 保存到本地数据中
        localStorage.setItem("categories", JSON.stringify(data));
        // 给每个栏目都加上pageIndex = 1
        this.getCategories();
      });
    },

    onLoad() {
      // 刷新请求的时候,让当前的页面加一
      this.categories[this.active].pageIndex += 1;
      this.getList();
    },
    // 封装加载页面的函数
    getList() {
      // 如果数据加载完毕直接停止执行其余代码
      if (this.categories[this.active].finished) {
        return;
      }
      // 把数据解构出来
      const { pageIndex, id } = this.categories[this.active];

      this.$axios({
        url: "/post",
        params: {
          pageIndex: this.categories[this.active].pageIndex,
          pagesiaze: 5,
          category: id
        }
      }).then(res => {
        console.log(res);
        // 解构出数据和文章总数
        const { data, total } = res.data;
        // 把数据合并到list数组中
        this.categories[this.active].posts = [
          ...this.categories[this.active].posts,
          ...data
        ];
        // 加载停止
        this.categories[this.active].loading = false;
        this.categories = [...this.categories];
        // 是否加载完数据
        if (this.categories[this.active].posts.length === total) {
          this.categories[this.active].finished = true;
        }
        this.categories = [...this.categories];
      });
    }
  }
};
</script>
<style lang="less" scoped>
// 如果添加了scoped之后,想修改第三方的样式要在样式前面/deep/
.container {
  // height: 1800px;
  .header {
    padding: 15/360 * 100vw;
    height: 45/360 * 100vw;
    background-color: #ff0000;
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: white;
    .iconnew {
      transform: scale(2);
      font-size: 25/360 * 100vw;
      padding-left: 5/360 * 100vw;
    }
    .search {
      display: flex;
      align-items: center;
      justify-content: center;
      flex: 1;
      height: 30/360 * 100vw;
      background-color: rgba(250, 250, 250, 0.5);
      border-radius: 50/360 * 100vw;
      margin: 0 20/360 * 100vw;
      span {
        margin-right: 5/360 * 100vw;
        font-size: 18/360 * 100vw;
      }
    }
    .iconwode {
      font-size: 25/360 * 100vw;
    }
  }
  /deep/ .van-tabs__nav {
    background-color: #eee !important;
  }
  /deep/ .van-tab.van-ellipsis {
    flex-basis: 15% !important;
  }
  /deep/ .van-tab:nth-last-child(2) {
    position: absolute;
    top: 0px;
    right: 0px;
    font-size: 35/360 * 100vw !important;
    box-sizing: unset;
    background-color: #eee;
  }

  /deep/ .van-tabs__wrap {
    padding-right: 27/360 * 100vw;
  }

  /deep/ .van-tabs__nav {
    // 静态定位
    // 恢复到原始流,不受定位影响!
    position: static;
  }
  /deep/ .van-tabs__line {
    position: static;
    // display: none;
  }
  /deep/.van-tab--active {
    border-bottom: 1px solid red;
  }
}
</style>